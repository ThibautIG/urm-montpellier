class TeacherFacade
!!!135938.java!!!	TeacherFacade(in nom : String, in pwd : String)
		this.manager = PersistFactory.getInstance().createManager();
		
		this.user = PersistFactory.getInstance().createTeacher(); //crée un teacher
			
		this.user.load(nom, pwd);
!!!136066.java!!!	getSchedules() : ArrayList<String>
		ArrayList<Schedule> scs;
		ArrayList<String> als = new ArrayList<String>();
		try {
			scs = this.manager.getSchedules();
			
			for (int i=0; i<scs.size(); i++)
			{
				als.add(scs.get(i).toString());
			}
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return als;
!!!136194.java!!!	getFeatures() : ArrayList<String>
		ArrayList<Feature> alft;
		ArrayList<String> als = new ArrayList<String>();
		try {
			alft = this.manager.getFeatures();
			
			for (int i=0; i<alft.size(); i++)
			{
				als.add(alft.get(i).toString());
			}
		} catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		
		return als;
!!!136322.java!!!	getTeachings() : ArrayList<String>
		ArrayList<Teaching> scs;
		ArrayList<String> alt = new ArrayList<String>();
		try 
		{
			scs = this.user.getTeachings();
			
			for (int i=0; i<scs.size(); i++)
			{
				alt.add(scs.get(i).toString());
			}
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		return alt;
!!!136450.java!!!	getValidBooking(in week : int) : ArrayList<ArrayList<String>>
		int i=0;
		/* liste de liste de string */
		ArrayList<ArrayList<String>> resaValidesString = new ArrayList<ArrayList<String>>();
		ArrayList<String> resaString;
		ArrayList<Booking> resaValides = new ArrayList<Booking>();
		Booking booking;
		
		try 
		{
			resaValides = user.getValidBooking(week);
		} 
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		
		for (i=0; i<resaValides.size(); i++){
			
			booking = resaValides.get(i);
			
			resaString = new ArrayList<String>();
			resaString.add(booking.getDate().toString());
			resaString.add(booking.getSchedule().toString());
			resaString.add(booking.getRoom());
			resaString.add(booking.getField());
			
			resaValidesString.add(resaString);
		}
		return resaValidesString;
!!!136578.java!!!	isSuperUser() : boolean
		if(this.user != null)
		{
			return this.user.isSuperUser();
		}
		else
		{
			return false;
		}
!!!136706.java!!!	confirmBooking(in teachingSelected : String, inout dateSelected : Date, in scheduleSelected : String, inout featuresSelected : Enumeration<String>, in capacity : int, in comments : String) : void
		if(this.myBooking==null)
		{
			this.checkFreeRooms(dateSelected, scheduleSelected, featuresSelected, capacity);
		}
		
		int i = 0;
		
		if(teachingSelected.equals("reunion"))
		{
			
		}
		else
		{
			while(!this.user.getTeachings().get(i).toString().equals(teachingSelected))
			{
				i++;
			}
			this.myBooking.setTeaching(this.user.getTeachings().get(i));
		}
		
		this.myBooking.save();
!!!136834.java!!!	checkFreeRooms(inout dateSelected : Date, in scheduleSelected : String, inout featuresSelected : Enumeration<String>, in capacity : int) : int
		int freeRooms = 0;
		this.myBooking = PersistFactory.getInstance().createBooking();
		
		this.myBooking.setDate(dateSelected);
		
		int s = 0;
		
		while(!this.manager.getSchedules().get(s).toString().equals(scheduleSelected))
		{
			s++;
		}
		
		this.myBooking.setSchedule(this.manager.getSchedules().get(s));
		
		ArrayList<Feature> alf = new ArrayList<Feature>();
		while(featuresSelected!=null && featuresSelected.hasMoreElements())
		{
			String ft = featuresSelected.nextElement();
			int ftus = 0;
			while(!this.manager.getFeatures().get(ftus).toString().equals(ft))
			{
				ftus++;
			}
			alf.add(this.manager.getFeatures().get(ftus));
		}
		
		this.myBooking.setFeatures(alf);
		
		this.myBooking.capacity = capacity;
		
		freeRooms = this.myBooking.checkFreeRooms();

		return freeRooms;
